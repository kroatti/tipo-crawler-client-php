<?php
/**
 * ResultItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  TipoCrawler
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Tipo API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TipoCrawler\Model;

use \ArrayAccess;
use \TipoCrawler\ObjectSerializer;

/**
 * ResultItem Class Doc Comment
 *
 * @category Class
 * @package  TipoCrawler
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResultItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResultItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trademark_name' => 'string',
        'application_number' => 'string',
        'registeration_number' => 'string',
        'national_classes' => 'string',
        'name_of_applicant' => 'string',
        'name_of_applicant_in_english' => 'string',
        'item_type' => 'string',
        'case_number' => 'string',
        'case_type' => 'string',
        'application_number_enc' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'trademark_name' => null,
        'application_number' => null,
        'registeration_number' => null,
        'national_classes' => null,
        'name_of_applicant' => null,
        'name_of_applicant_in_english' => null,
        'item_type' => null,
        'case_number' => null,
        'case_type' => null,
        'application_number_enc' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trademark_name' => 'trademarkName',
        'application_number' => 'applicationNumber',
        'registeration_number' => 'registerationNumber',
        'national_classes' => 'nationalClasses',
        'name_of_applicant' => 'nameOfApplicant',
        'name_of_applicant_in_english' => 'nameOfApplicantInEnglish',
        'item_type' => 'itemType',
        'case_number' => 'caseNumber',
        'case_type' => 'caseType',
        'application_number_enc' => 'applicationNumberEnc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trademark_name' => 'setTrademarkName',
        'application_number' => 'setApplicationNumber',
        'registeration_number' => 'setRegisterationNumber',
        'national_classes' => 'setNationalClasses',
        'name_of_applicant' => 'setNameOfApplicant',
        'name_of_applicant_in_english' => 'setNameOfApplicantInEnglish',
        'item_type' => 'setItemType',
        'case_number' => 'setCaseNumber',
        'case_type' => 'setCaseType',
        'application_number_enc' => 'setApplicationNumberEnc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trademark_name' => 'getTrademarkName',
        'application_number' => 'getApplicationNumber',
        'registeration_number' => 'getRegisterationNumber',
        'national_classes' => 'getNationalClasses',
        'name_of_applicant' => 'getNameOfApplicant',
        'name_of_applicant_in_english' => 'getNameOfApplicantInEnglish',
        'item_type' => 'getItemType',
        'case_number' => 'getCaseNumber',
        'case_type' => 'getCaseType',
        'application_number_enc' => 'getApplicationNumberEnc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trademark_name'] = isset($data['trademark_name']) ? $data['trademark_name'] : null;
        $this->container['application_number'] = isset($data['application_number']) ? $data['application_number'] : null;
        $this->container['registeration_number'] = isset($data['registeration_number']) ? $data['registeration_number'] : null;
        $this->container['national_classes'] = isset($data['national_classes']) ? $data['national_classes'] : null;
        $this->container['name_of_applicant'] = isset($data['name_of_applicant']) ? $data['name_of_applicant'] : null;
        $this->container['name_of_applicant_in_english'] = isset($data['name_of_applicant_in_english']) ? $data['name_of_applicant_in_english'] : null;
        $this->container['item_type'] = isset($data['item_type']) ? $data['item_type'] : null;
        $this->container['case_number'] = isset($data['case_number']) ? $data['case_number'] : null;
        $this->container['case_type'] = isset($data['case_type']) ? $data['case_type'] : null;
        $this->container['application_number_enc'] = isset($data['application_number_enc']) ? $data['application_number_enc'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets trademark_name
     *
     * @return string
     */
    public function getTrademarkName()
    {
        return $this->container['trademark_name'];
    }

    /**
     * Sets trademark_name
     *
     * @param string $trademark_name trademark_name
     *
     * @return $this
     */
    public function setTrademarkName($trademark_name)
    {
        $this->container['trademark_name'] = $trademark_name;

        return $this;
    }

    /**
     * Gets application_number
     *
     * @return string
     */
    public function getApplicationNumber()
    {
        return $this->container['application_number'];
    }

    /**
     * Sets application_number
     *
     * @param string $application_number application_number
     *
     * @return $this
     */
    public function setApplicationNumber($application_number)
    {
        $this->container['application_number'] = $application_number;

        return $this;
    }

    /**
     * Gets registeration_number
     *
     * @return string
     */
    public function getRegisterationNumber()
    {
        return $this->container['registeration_number'];
    }

    /**
     * Sets registeration_number
     *
     * @param string $registeration_number registeration_number
     *
     * @return $this
     */
    public function setRegisterationNumber($registeration_number)
    {
        $this->container['registeration_number'] = $registeration_number;

        return $this;
    }

    /**
     * Gets national_classes
     *
     * @return string
     */
    public function getNationalClasses()
    {
        return $this->container['national_classes'];
    }

    /**
     * Sets national_classes
     *
     * @param string $national_classes national_classes
     *
     * @return $this
     */
    public function setNationalClasses($national_classes)
    {
        $this->container['national_classes'] = $national_classes;

        return $this;
    }

    /**
     * Gets name_of_applicant
     *
     * @return string
     */
    public function getNameOfApplicant()
    {
        return $this->container['name_of_applicant'];
    }

    /**
     * Sets name_of_applicant
     *
     * @param string $name_of_applicant name_of_applicant
     *
     * @return $this
     */
    public function setNameOfApplicant($name_of_applicant)
    {
        $this->container['name_of_applicant'] = $name_of_applicant;

        return $this;
    }

    /**
     * Gets name_of_applicant_in_english
     *
     * @return string
     */
    public function getNameOfApplicantInEnglish()
    {
        return $this->container['name_of_applicant_in_english'];
    }

    /**
     * Sets name_of_applicant_in_english
     *
     * @param string $name_of_applicant_in_english name_of_applicant_in_english
     *
     * @return $this
     */
    public function setNameOfApplicantInEnglish($name_of_applicant_in_english)
    {
        $this->container['name_of_applicant_in_english'] = $name_of_applicant_in_english;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string $item_type item_type
     *
     * @return $this
     */
    public function setItemType($item_type)
    {
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets case_number
     *
     * @return string
     */
    public function getCaseNumber()
    {
        return $this->container['case_number'];
    }

    /**
     * Sets case_number
     *
     * @param string $case_number case_number
     *
     * @return $this
     */
    public function setCaseNumber($case_number)
    {
        $this->container['case_number'] = $case_number;

        return $this;
    }

    /**
     * Gets case_type
     *
     * @return string
     */
    public function getCaseType()
    {
        return $this->container['case_type'];
    }

    /**
     * Sets case_type
     *
     * @param string $case_type case_type
     *
     * @return $this
     */
    public function setCaseType($case_type)
    {
        $this->container['case_type'] = $case_type;

        return $this;
    }

    /**
     * Gets application_number_enc
     *
     * @return string
     */
    public function getApplicationNumberEnc()
    {
        return $this->container['application_number_enc'];
    }

    /**
     * Sets application_number_enc
     *
     * @param string $application_number_enc application_number_enc
     *
     * @return $this
     */
    public function setApplicationNumberEnc($application_number_enc)
    {
        $this->container['application_number_enc'] = $application_number_enc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


